{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/lib/utils.ts"],"sourcesContent":["import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,CAAA,GAAA,8JAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,wIAAA,CAAA,OAAI,AAAD,EAAE;AACtB","debugId":null}},
    {"offset": {"line": 26, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/components/ui/button.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n        ghost:\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\n"],"names":[],"mappings":";;;;;AACA;AACA;AAEA;;;;;AAEA,MAAM,iBAAiB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACvB,+bACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,aACE;YACF,SACE;YACF,WACE;YACF,OACE;YACF,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AAGF,SAAS,OAAO,EACd,SAAS,EACT,OAAO,EACP,IAAI,EACJ,UAAU,KAAK,EACf,GAAG,OAIF;IACD,MAAM,OAAO,UAAU,mKAAA,CAAA,OAAI,GAAG;IAE9B,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,eAAe;YAAE;YAAS;YAAM;QAAU;QACvD,GAAG,KAAK;;;;;;AAGf;KAnBS","debugId":null}},
    {"offset": {"line": 89, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/lib/rubikCubeUtils.ts"],"sourcesContent":["import * as THREE from 'three';\n\n// Constants for cube colors\nexport const CUBE_COLORS = {\n  front: 0xff0000,   // Red\n  back: 0xffa500,    // Orange\n  top: 0xffffff,     // White\n  bottom: 0xffff00,  // Yellow\n  right: 0x00ff00,   // Green\n  left: 0x0000ff,    // Blue\n};\n\n// Create a single cubie (small cube)\nexport const createCubie = (x: number, y: number, z: number, colors: any, size: number = 1) => {\n  const geometry = new THREE.BoxGeometry(size, size, size);\n  const materials = [\n    new THREE.MeshPhongMaterial({ color: colors.right, shininess: 30 }), // Right\n    new THREE.MeshPhongMaterial({ color: colors.left, shininess: 30 }),  // Left\n    new THREE.MeshPhongMaterial({ color: colors.top, shininess: 30 }),   // Top\n    new THREE.MeshPhongMaterial({ color: colors.bottom, shininess: 30 }), // Bottom\n    new THREE.MeshPhongMaterial({ color: colors.front, shininess: 30 }),  // Front\n    new THREE.MeshPhongMaterial({ color: colors.back, shininess: 30 }),   // Back\n  ];\n\n  const cubie = new THREE.Mesh(geometry, materials);\n  cubie.position.set(x, y, z);\n  cubie.castShadow = true;\n  cubie.receiveShadow = true;\n\n  // Store the original colors and position for reference\n  (cubie as any).originalColors = { ...colors };\n  (cubie as any).originalPosition = { x, y, z };\n  \n  return cubie;\n};\n\n// Get initial colors for a cubie based on its position\nconst getInitialCubieColors = (x: number, y: number, z: number) => {\n  return {\n    right: x === 1 ? CUBE_COLORS.right : 0x333333,\n    left: x === -1 ? CUBE_COLORS.left : 0x333333,\n    top: y === 1 ? CUBE_COLORS.top : 0x333333,\n    bottom: y === -1 ? CUBE_COLORS.bottom : 0x333333,\n    front: z === 1 ? CUBE_COLORS.front : 0x333333,\n    back: z === -1 ? CUBE_COLORS.back : 0x333333,\n  };\n};\n\n// Create the full Rubik's Cube (3x3x3)\nexport const createRubiksCube = () => {\n  const group = new THREE.Group();\n  const size = 1;\n  const gap = 0.1;\n\n  // Create all 27 cubies\n  for (let x = -1; x <= 1; x++) {\n    for (let y = -1; y <= 1; y++) {\n      for (let z = -1; z <= 1; z++) {\n        const colors = getInitialCubieColors(x, y, z);\n        const cubie = createCubie(\n          x * (size + gap),\n          y * (size + gap),\n          z * (size + gap),\n          colors,\n          size\n        );\n        group.add(cubie);\n      }\n    }\n  }\n\n  // Initial rotation for better view\n  group.rotation.x = Math.PI / 6;\n  group.rotation.y = -Math.PI / 4;\n\n  return group;\n};\n\n// Function to rotate a face\nexport const rotateFace = (cube: THREE.Group, axis: 'x' | 'y' | 'z', layer: number, angle: number) => {\n  const rotationMatrix = new THREE.Matrix4();\n  const pivotPoint = new THREE.Vector3(0, 0, 0);\n  \n  // Select cubies in the correct layer\n  const cubiesInLayer = cube.children.filter((cubie) => {\n    const position = cubie.position.clone();\n    cube.localToWorld(position);\n    const coord = position[axis];\n    return Math.abs(coord - layer) < 0.1;\n  });\n\n  // Create rotation matrix\n  switch (axis) {\n    case 'x':\n      rotationMatrix.makeRotationX(angle);\n      break;\n    case 'y':\n      rotationMatrix.makeRotationY(angle);\n      break;\n    case 'z':\n      rotationMatrix.makeRotationZ(angle);\n      break;\n  }\n\n  // Apply rotation to selected cubies\n  cubiesInLayer.forEach((cubie) => {\n    cubie.position.sub(pivotPoint);\n    cubie.position.applyMatrix4(rotationMatrix);\n    cubie.position.add(pivotPoint);\n    cubie.rotateOnWorldAxis(new THREE.Vector3(axis === 'x' ? 1 : 0, axis === 'y' ? 1 : 0, axis === 'z' ? 1 : 0), angle);\n  });\n};\n\n// Function to scramble the cube\nexport const scrambleCube = (cube: THREE.Group) => {\n  const axes: Array<'x' | 'y' | 'z'> = ['x', 'y', 'z'];\n  const layers = [-1, 0, 1];\n  const angles = [Math.PI / 2, -Math.PI / 2, Math.PI];\n  \n  // Apply 20 random moves\n  for (let i = 0; i < 20; i++) {\n    const axis = axes[Math.floor(Math.random() * axes.length)];\n    const layer = layers[Math.floor(Math.random() * layers.length)];\n    const angle = angles[Math.floor(Math.random() * angles.length)];\n    rotateFace(cube, axis, layer, angle);\n  }\n};\n\n// Function to check if the cube is solved\nexport const isSolved = (cube: THREE.Group): boolean => {\n  const faces = ['right', 'left', 'top', 'bottom', 'front', 'back'];\n  \n  for (const face of faces) {\n    const faceColor = (cube.children[0] as any).originalColors[face];\n    const faceCubies = cube.children.filter((cubie) => {\n      const materials = (cubie as THREE.Mesh).material as THREE.MeshPhongMaterial[];\n      const faceIndex = faces.indexOf(face);\n      return materials[faceIndex].color.getHex() === faceColor;\n    });\n    \n    if (faceCubies.length !== 9) {\n      return false;\n    }\n  }\n  \n  return true;\n};\n\n// Function to reset cube to initial state\nexport const resetCube = (cube: THREE.Group) => {\n  cube.rotation.set(Math.PI / 6, -Math.PI / 4, 0);\n  \n  cube.children.forEach((cubie) => {\n    const originalPosition = (cubie as any).originalPosition;\n    const originalColors = (cubie as any).originalColors;\n    \n    if (originalPosition && originalColors) {\n      cubie.position.set(\n        originalPosition.x,\n        originalPosition.y,\n        originalPosition.z\n      );\n      \n      const materials = (cubie as THREE.Mesh).material as THREE.MeshPhongMaterial[];\n      materials[0].color.setHex(originalColors.right);\n      materials[1].color.setHex(originalColors.left);\n      materials[2].color.setHex(originalColors.top);\n      materials[3].color.setHex(originalColors.bottom);\n      materials[4].color.setHex(originalColors.front);\n      materials[5].color.setHex(originalColors.back);\n    }\n  });\n};\n\n// Function to handle cube rotation based on mouse/touch movement\nexport const rotateCube = (\n  cube: THREE.Group,\n  deltaX: number,\n  deltaY: number,\n  sensitivity: number = 0.01\n) => {\n  cube.rotation.y += deltaX * sensitivity;\n  cube.rotation.x += deltaY * sensitivity;\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 288, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/components/RubikCubeGame.tsx"],"sourcesContent":["'use client';\n\nimport React, { useRef, useEffect, useCallback, useState } from 'react';\nimport * as THREE from 'three';\nimport { Button } from '@/components/ui/button';\nimport { createRubiksCube, scrambleCube, resetCube, rotateCube, rotateFace, isSolved } from '@/lib/rubikCubeUtils';\n\nconst RubikCubeGame = () => {\n  // State to track WebGL support and cube state\n  const [webGLError, setWebGLError] = useState<string | undefined>(undefined);\n  const [isCubeSolved, setIsCubeSolved] = useState(true);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const rendererRef = useRef<THREE.WebGLRenderer | null>(null);\n  const sceneRef = useRef<THREE.Scene | null>(null);\n  const cameraRef = useRef<THREE.PerspectiveCamera | null>(null);\n  const cubeRef = useRef<THREE.Group | null>(null);\n  const animationFrameRef = useRef<number | null>(null);\n  const [isMouseDown, setIsMouseDown] = useState(false);\n  const [isTouchDown, setIsTouchDown] = useState(false);\n  const [lastMousePosition, setLastMousePosition] = useState({ x: 0, y: 0 });\n\n  // Initialize Three.js scene\n  const initScene = useCallback(() => {\n    if (!containerRef.current) return;\n\n    try {\n      // Initialize scene\n      const scene = new THREE.Scene();\n      scene.background = new THREE.Color(0x121212);\n      sceneRef.current = scene;\n\n      // Initialize camera with better position\n      const camera = new THREE.PerspectiveCamera(\n        60,\n        containerRef.current.clientWidth / containerRef.current.clientHeight,\n        0.1,\n        1000\n      );\n      camera.position.set(6, 4, 8);\n      camera.lookAt(0, 0, 0);\n      cameraRef.current = camera;\n\n      // Initialize renderer\n      const renderer = new THREE.WebGLRenderer({\n        antialias: true,\n        alpha: true,\n        powerPreference: 'default' as WebGLPowerPreference\n      });\n\n      if (!renderer.getContext()) {\n        throw new Error('Failed to initialize WebGL context');\n      }\n      renderer.setPixelRatio(window.devicePixelRatio);\n      renderer.setSize(containerRef.current.clientWidth, containerRef.current.clientHeight);\n      containerRef.current.appendChild(renderer.domElement);\n      rendererRef.current = renderer;\n\n      // Add lights\n      const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);\n      scene.add(ambientLight);\n\n      // Add directional lights from multiple angles\n      const createDirectionalLight = (x: number, y: number, z: number, intensity: number = 0.8) => {\n        const light = new THREE.DirectionalLight(0xffffff, intensity);\n        light.position.set(x, y, z);\n        return light;\n      };\n\n      scene.add(createDirectionalLight(10, 10, 10));   // Top-right-front\n      scene.add(createDirectionalLight(-10, 10, 10));  // Top-left-front\n      scene.add(createDirectionalLight(10, -10, 10));  // Bottom-right-front\n      scene.add(createDirectionalLight(0, 10, -10));   // Top-back\n\n      // Create Rubik's cube\n      const cube = createRubiksCube();\n      scene.add(cube);\n      cubeRef.current = cube;\n\n      // Animation loop with smooth auto-rotation\n      const animate = () => {\n        animationFrameRef.current = requestAnimationFrame(animate);\n        if (rendererRef.current && sceneRef.current && cameraRef.current && cubeRef.current) {\n          if (!isMouseDown && !isTouchDown) {\n            // Add subtle auto-rotation when not being dragged or touched\n            cubeRef.current.rotation.y += 0.005;\n          }\n          rendererRef.current.render(sceneRef.current, cameraRef.current);\n        }\n      };\n      animate();\n\n    } catch (error) {\n      setWebGLError(error instanceof Error ? error.message : 'Failed to initialize WebGL');\n      return;\n    }\n\n    // Handle window resize\n    const handleResize = () => {\n      if (!containerRef.current || !cameraRef.current || !rendererRef.current) return;\n\n      const width = containerRef.current.clientWidth;\n      const height = containerRef.current.clientHeight;\n\n      cameraRef.current.aspect = width / height;\n      cameraRef.current.updateProjectionMatrix();\n      rendererRef.current.setSize(width, height);\n      rendererRef.current.setPixelRatio(window.devicePixelRatio);\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    // Handle keyboard controls\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (!cubeRef.current) return;\n\n      const angle = event.shiftKey ? -Math.PI / 2 : Math.PI / 2;\n      \n      switch (event.key.toLowerCase()) {\n        case 'f': // Front face\n          rotateFace(cubeRef.current!, 'z', 1, angle);\n          break;\n        case 'b': // Back face\n          rotateFace(cubeRef.current!, 'z', -1, angle);\n          break;\n        case 'r': // Right face\n          rotateFace(cubeRef.current!, 'x', 1, angle);\n          break;\n        case 'l': // Left face\n          rotateFace(cubeRef.current!, 'x', -1, angle);\n          break;\n        case 'u': // Up face\n          rotateFace(cubeRef.current!, 'y', 1, angle);\n          break;\n        case 'd': // Down face\n          rotateFace(cubeRef.current!, 'y', -1, angle);\n          break;\n      }\n\n      // Check if cube is solved after each move\n      if (cubeRef.current) {\n        setIsCubeSolved(isSolved(cubeRef.current));\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      window.removeEventListener('keydown', handleKeyDown);\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n      if (containerRef.current && rendererRef.current) {\n        containerRef.current.removeChild(rendererRef.current.domElement);\n      }\n      rendererRef.current?.dispose();\n    };\n  }, []);\n\n  // Initialize scene on component mount\n  useEffect(() => {\n    initScene();\n  }, [initScene]);\n\n  // Event handlers\n  const handleMouseDown = useCallback((e: React.MouseEvent) => {\n    setIsMouseDown(true);\n    setLastMousePosition({\n      x: e.clientX,\n      y: e.clientY,\n    });\n  }, []);\n\n  const handleMouseMove = useCallback((e: React.MouseEvent) => {\n    if (!isMouseDown || !cubeRef.current) return;\n\n    const deltaX = e.clientX - lastMousePosition.x;\n    const deltaY = e.clientY - lastMousePosition.y;\n\n    rotateCube(cubeRef.current, deltaX, deltaY);\n\n    setLastMousePosition({\n      x: e.clientX,\n      y: e.clientY,\n    });\n  }, [isMouseDown, lastMousePosition]);\n\n  const handleMouseUp = useCallback(() => {\n    setIsMouseDown(false);\n  }, []);\n\n  const handleTouchStart = useCallback((e: React.TouchEvent) => {\n    const touch = e.touches[0];\n    setIsTouchDown(true);\n    setLastMousePosition({\n      x: touch.clientX,\n      y: touch.clientY,\n    });\n  }, []);\n\n  const handleTouchMove = useCallback((e: React.TouchEvent) => {\n    if (!isTouchDown || !cubeRef.current) return;\n\n    const touch = e.touches[0];\n    const deltaX = touch.clientX - lastMousePosition.x;\n    const deltaY = touch.clientY - lastMousePosition.y;\n\n    rotateCube(cubeRef.current, deltaX, deltaY);\n\n    setLastMousePosition({\n      x: touch.clientX,\n      y: touch.clientY,\n    });\n  }, [isTouchDown, lastMousePosition]);\n\n  const handleTouchEnd = useCallback(() => {\n    setIsTouchDown(false);\n  }, []);\n\n  // Game control handlers\n  const [selectedLayer, setSelectedLayer] = useState<{ axis: 'x' | 'y' | 'z'; layer: number } | null>(null);\n  const [isRotating, setIsRotating] = useState(false);\n\n  const handleScramble = useCallback(() => {\n    if (cubeRef.current && !isRotating) {\n      scrambleCube(cubeRef.current);\n      setIsCubeSolved(false);\n    }\n  }, [isRotating]);\n\n  const handleReset = useCallback(() => {\n    if (cubeRef.current && !isRotating) {\n      resetCube(cubeRef.current);\n      setIsCubeSolved(true);\n    }\n  }, [isRotating]);\n\n  // Rotate selected layer clockwise or counterclockwise\n  const rotateSelectedLayer = useCallback((clockwise: boolean) => {\n    if (!cubeRef.current || !selectedLayer || isRotating) return;\n\n    setIsRotating(true);\n    const angle = clockwise ? Math.PI / 2 : -Math.PI / 2;\n\n    // Animate rotation over 300ms\n    const duration = 300;\n    const start = performance.now();\n\n    const animateRotation = (time: number) => {\n      const elapsed = time - start;\n      const progress = Math.min(elapsed / duration, 1);\n      const currentAngle = angle * progress;\n\n      // Reset rotation before applying incremental rotation\n      resetCube(cubeRef.current!);\n      rotateFace(cubeRef.current!, selectedLayer.axis, selectedLayer.layer, currentAngle);\n\n      if (progress < 1) {\n        requestAnimationFrame(animateRotation);\n      } else {\n        setIsRotating(false);\n        setIsCubeSolved(isSolved(cubeRef.current!));\n      }\n    };\n\n    requestAnimationFrame(animateRotation);\n  }, [selectedLayer, isRotating]);\n\n  // UI for selecting layer and rotating\n  const LayerSelector = () => {\n    const layers = [-1, 0, 1];\n    const axes: Array<'x' | 'y' | 'z'> = ['x', 'y', 'z'];\n\n    return (\n      <div className=\"mt-6 flex flex-col gap-4\">\n        {axes.map((axis) => (\n          <div key={axis} className=\"flex items-center gap-2\">\n            <span className=\"text-white font-semibold capitalize\">{axis.toUpperCase()} axis:</span>\n            {layers.map((layer) => (\n              <button\n                key={layer}\n                className={`px-3 py-1 rounded ${\n                  selectedLayer?.axis === axis && selectedLayer.layer === layer\n                    ? 'bg-blue-600 text-white'\n                    : 'bg-gray-700 text-gray-300'\n                }`}\n                onClick={() => setSelectedLayer({ axis, layer })}\n                disabled={isRotating}\n              >\n                {layer === -1 ? '1' : layer === 0 ? '2' : '3'}\n              </button>\n            ))}\n          </div>\n        ))}\n        <div className=\"flex gap-4 mt-2\">\n          <button\n            className=\"bg-green-600 text-white px-4 py-2 rounded disabled:opacity-50\"\n            onClick={() => rotateSelectedLayer(true)}\n            disabled={!selectedLayer || isRotating}\n          >\n            Girar ↻\n          </button>\n          <button\n            className=\"bg-red-600 text-white px-4 py-2 rounded disabled:opacity-50\"\n            onClick={() => rotateSelectedLayer(false)}\n            disabled={!selectedLayer || isRotating}\n          >\n            Girar ↺\n          </button>\n        </div>\n      </div>\n    );\n  };\n\n\n  if (webGLError) {\n    return (\n      <div className=\"w-full h-screen flex flex-col items-center justify-center bg-black text-white p-4\">\n        <h1 className=\"text-2xl font-bold mb-4\">Error</h1>\n        <p className=\"text-red-500\">{webGLError}</p>\n        <p className=\"mt-2\">Por favor, intenta usar un navegador más moderno o habilita el soporte de WebGL.</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"w-full h-screen flex flex-col items-center justify-center bg-gradient-to-b from-gray-900 to-black p-4\">\n      <div className=\"text-center mb-6\">\n        <h1 className=\"text-5xl font-bold text-white mb-4 tracking-tight\">Cubo Rubik</h1>\n        <div className=\"space-y-2 text-gray-300\">\n          <p className=\"text-lg\">🖱️ Arrastra para rotar el cubo</p>\n          <p className=\"text-sm\">El cubo gira automáticamente cuando no lo estás moviendo</p>\n        </div>\n      </div>\n      \n      <div\n        ref={containerRef}\n        className=\"w-full max-w-4xl aspect-square rounded-2xl overflow-hidden shadow-2xl border border-gray-800 bg-black/50 backdrop-blur-sm\"\n        onMouseDown={handleMouseDown}\n        onMouseMove={handleMouseMove}\n        onMouseUp={handleMouseUp}\n        onMouseLeave={handleMouseUp}\n        onTouchStart={handleTouchStart}\n        onTouchMove={handleTouchMove}\n        onTouchEnd={handleTouchEnd}\n      />\n\n      <div className=\"mt-8 flex flex-col sm:flex-row gap-4 items-center\">\n        <Button\n          onClick={handleScramble}\n          className=\"bg-gradient-to-r from-red-500 to-orange-500 text-white hover:opacity-90 px-8 py-3 text-lg font-semibold rounded-full transition-all duration-200 transform hover:scale-105 shadow-lg\"\n        >\n          🎲 Mezclar\n        </Button>\n        <Button\n          onClick={handleReset}\n          className=\"bg-gradient-to-r from-blue-500 to-purple-500 text-white hover:opacity-90 px-8 py-3 text-lg font-semibold rounded-full transition-all duration-200 transform hover:scale-105 shadow-lg\"\n        >\n          ↺ Reiniciar\n        </Button>\n      </div>\n\n      <LayerSelector />\n\n      <div className=\"mt-6 text-center text-gray-400 text-sm\">\n        <p>Desarrollado con Three.js y Next.js</p>\n      </div>\n    </div>\n  );\n};\n\nexport default RubikCubeGame;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 815, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/app/rubik-cube/page.tsx"],"sourcesContent":["'use client';\n\nimport RubikCubeGame from '@/components/RubikCubeGame';\n\nexport default function RubikCubePage() {\n  return (\n    <main className=\"min-h-screen w-full bg-black\">\n      <RubikCubeGame />\n    </main>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AAFA;;;AAIe,SAAS;IACtB,qBACE,6LAAC;QAAK,WAAU;kBACd,cAAA,6LAAC,sIAAA,CAAA,UAAa;;;;;;;;;;AAGpB;KANwB","debugId":null}}]
}